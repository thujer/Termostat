C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\obj\main.obj
COMPILER INVOKED BY: H:\Prglan\Keil\C51\BIN\C51.EXE src\main.c51 OMF2 INCDIR(.\src) DEBUG CODE PRINT(.\lst\main.lst) OBJ
                    -ECT(.\obj\main.obj)

line level    source

   1          
   2            /////////////////////////////////////////////////////////////////////////////
   3            // +---------------------------------------------------------------------+ //
   4            // |                           Basic enviroment                          | //
   5            // |           with command detection, events, timers and more ...       |
   6            // |          -----------------------------------------------------      | //
   7          #define                           VERSION "1.01a"                           
   8          #define                           BUILD "090411"                           
   9            // |                                                                     | //
  10            // |                           Thomas Hoodger                            | //
  11            // |                       Copyright (c) 2008-2009                       | //
  12            // |                    thomas.hoodger(at)gmail.com                      | //
  13            // +---------------------------------------------------------------------+ //
  14            /////////////////////////////////////////////////////////////////////////////
  15            // ----------------------------------------------------------------------- //
  16            //                - Pohybovy sensor                                                            //
  17            //                    - soumrakovym spinacem,                                          //
  18            //                    - plynule rozsveceni a zhasinanim                                                //
  19            //                    - komunikacni rozhrani                                   //
  20            // ----------------------------------------------------------------------- //
  21            /////////////////////////////////////////////////////////////////////////////
  22            // ----------------------------------------------------------------------- //
  23            //  Version history:                                                       //
  24            //     1.01       - sestaveni zakladni aplikace s novymi drivery           //
  25            //                - portace pro AT89C51ED2                                  //
  26            //                                                                                                                                             //
  27            // ----------------------------------------------------------------------- //
  28            /////////////////////////////////////////////////////////////////////////////
  29          
  30          #include "target.h"
  31          #include "target.def"
  32          #include TARGET_SFR_HEADER
  33          #include <stdio.h>          // Standard I/O routines
  34          #include "cmd.h"            // command detector
  35          #include "cmd.def"          // commands table
  36          #include "event.h"          // driver udalosti
  37          #include "event.def"        // definice udalosti
  38          #include "iap.h"            // In Application Programming
  39          #include "isp.h"            // ISP mode access security
  40          #include "led.h"            // LED driver
  41          #include "pin.h"            // Pin utils
  42          #include "stdout.h"         // Standard output forwards
  43          #include "str.h"            // String tools
  44          #include "tsense.h"         // Temperature sensor
  45          #include "tsense.def"         // Temperature sensor
  46          #include "timers.h"         // Timer 0 services init
  47          #include "uart.h"                   // Uart driver
  48          //--------------------------------------------------------------------------------------------------------
             -----
  49          
  50          #define MAIN_TERMINAL_PARBUF_SIZE 20
  51          
  52          //--------------------------------------------------------------------------------------------------------
             -----
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 2   

  53          uchar TARGET_XMEM  main_terminal_parbuf[MAIN_TERMINAL_PARBUF_SIZE];       // buffer parametru pro SWCOM
  54          
  55          bit main_measure_loop = 0;
  56          bit main_measure_request = 0;
  57          //--------------------------------------------------------------------------------------------------------
             -----
  58          
  59          
  60          
  61          void main_uart_command(uchar command_id)
  62          {
  63   1          char pin_id;
  64   1          char pin_state;
  65   1      
  66   1          switch(command_id)
  67   1          {
  68   2              case CMD_HELP:
  69   2                      cmd_command_list(CMD_SESSION_ID_TERMINAL);
  70   2                      break;
  71   2      
  72   2              case CMD_BOOT:  
  73   2                      printf(BR"Call ISP recovery..."); 
  74   2                      isp_recovery();
  75   2                      printf("RET"DBR);
  76   2                      break;
  77   2      
  78   2              case CMD_CALL_ISP:
  79   2                      printf(BR"Call ISP..."); 
  80   2                      isp_call_bootloader();
  81   2                      printf("RET"DBR);
  82   2                      break;
  83   2              
  84   2              case CMD_P0:
  85   2                      //while(~printf_ready); 
  86   2      
  87   2                      if(cmd_par_count(CMD_SESSION_ID_TERMINAL))
  88   2                      {
  89   3                          if(cmd_par_count(CMD_SESSION_ID_TERMINAL) > 1)
  90   3                          {
  91   4                              pin_id    = cmd_getparnum(CMD_SESSION_ID_TERMINAL, 0, 1);          // get pin id f
             -rom parameter
  92   4                              pin_state = cmd_getparnum(CMD_SESSION_ID_TERMINAL, 1, 1);          // get pin stat
             -e from parameter
  93   4      
  94   4                              pin_change(PORT_ID_P0, pin_id, pin_state);
  95   4                          }
  96   3      
  97   3                          printf("P0.%i == %i"DBR, cmd_getparnum(CMD_SESSION_ID_TERMINAL, 0, 1), (int) pin_get_s
             -tate(PORT_ID_P0, cmd_getparnum(CMD_SESSION_ID_TERMINAL, 0, 1)));
  98   3                      }
  99   2                      else
 100   2                          printf("P0: %i"DBR, (int) P0); 
 101   2                      //printf_ready = 1;    
 102   2                      break;
 103   2      
 104   2              case CMD_P1:    
 105   2                      //while(~printf_ready); 
 106   2                      if(cmd_par_count(CMD_SESSION_ID_TERMINAL))
 107   2                      {
 108   3                          if(cmd_par_count(CMD_SESSION_ID_TERMINAL) > 1)
 109   3                          {
 110   4                              pin_id    = cmd_getparnum(CMD_SESSION_ID_TERMINAL, 0, 1);          // get pin id f
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 3   

             -rom parameter
 111   4                              pin_state = cmd_getparnum(CMD_SESSION_ID_TERMINAL, 1, 1);          // get pin stat
             -e from parameter
 112   4      
 113   4                              pin_change(PORT_ID_P1, pin_id, pin_state);
 114   4                          }
 115   3      
 116   3                          printf("P1.%i == %i"DBR, cmd_getparnum(CMD_SESSION_ID_TERMINAL, 0, 1), (int) pin_get_s
             -tate(PORT_ID_P1, cmd_getparnum(CMD_SESSION_ID_TERMINAL, 0, 1)));
 117   3                      }
 118   2                      else
 119   2                          printf("P1: %i"DBR, (int) P1); 
 120   2      
 121   2                      //printf_ready = 1;    
 122   2                      break;
 123   2      
 124   2              case CMD_INFINITE_LOOP:
 125   2                      printf("Going into infinite loop, press ESC to break it out..."); 
 126   2                      while(1)
 127   2                      {
 128   3                          uart_proc();
 129   3      
 130   3                          if(uart_ribuf == 27)
 131   3                              break;
 132   3                      }
 133   2                      printf(BR"BREAK"DBR);
 134   2                      break;
 135   2      
 136   2              case CMD_TSENSE:
 137   2                      main_measure_loop = ~main_measure_loop;
 138   2                      printf(BR"Temperature loop %s..."DBR, main_measure_loop?"started":"stopped");
 139   2      
 140   2                      if(main_measure_loop)
 141   2                          tsense_add_task(0, EVENT_TSENSE_FINISH);
 142   2                      break;
 143   2          }
 144   1      }
 145          
 146          
 147          //-------------------------------------//
 148          //        Event scheduler              //
 149          //-------------------------------------//
 150          void main_event_proc(uchar event_id, uint event_value)
 151          {
 152   1          #if TSENSE_COMPILE_COMPENSATION == 1
 153   1          uchar i;
 154   1          #endif
 155   1      
 156   1          switch(event_id)
 157   1          {
 158   2              case EVENT_STARTUP:
 159   2                      break;
 160   2      
 161   2              case EVENT_TSENSE_FINISH:
 162   2                      printf("IntrCall: %i, ", (uint) tsense_interrupt_counter);
 163   2                      printf("TH: %u, ", (uint) tsense_timer_value_H);
 164   2                      printf("TL: %u, ", (uint) tsense_timer_value_L);
 165   2                      printf("Temp: %f"BR, tsense_temperature);
 166   2      
 167   2                      #if TSENSE_COMPILE_COMPENSATION == 1
 168   2                      printf(BR"---------------------------------------"BR);
 169   2                      printf(BR"Realtime TimerH mins: ");
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 4   

 170   2                      for(i=TSENSE_PERIODS_SKIPPED; i; i--) 
 171   2                          printf(" %i ", tsense_timer_H_value_min[i]);
 172   2                      
 173   2                      printf(BR"Realtime TimerH maxs: ");
 174   2                      for(i=TSENSE_PERIODS_SKIPPED; i; i--) 
 175   2                          printf(" %i ", tsense_timer_H_value_max[i]);
 176   2                      
 177   2                      printf(BR"Realtime TimerL mins: ");
 178   2                      for(i=TSENSE_PERIODS_SKIPPED; i; i--) 
 179   2                          printf(" %i ", tsense_timer_L_value_min[i]);
 180   2                      
 181   2                      printf(BR"Realtime TimerL maxs: ");
 182   2                      for(i=TSENSE_PERIODS_SKIPPED; i; i--) 
 183   2                          printf(" %i ", tsense_timer_L_value_max[i]);
 184   2                     
 185   2                      #endif
 186   2      
 187   2                      #ifdef TSENSE_DEBUG_LOG
 188   2                      printf("---------------------------------------"BR);
 189   2                      for(i=0; i<tsense_timer_H_array_ix; i++)
 190   2                      {
 191   3                          printf("%u, %u"BR, tsense_timer_H_array[i], tsense_timer_L_array[i]);
 192   3                      }
 193   2                      #endif
 194   2      
 195   2                      if(main_measure_loop)
 196   2                          main_measure_request = 1;
 197   2      
 198   2                      //PCON |= 1;
 199   2      
 200   2                      break;
 201   2      
 202   2              case EVENT_TSENSE_ERROR:
 203   2                      main_measure_loop = 0;
 204   2                      main_measure_request = 0;
 205   2                      printf(BR"Temperature measure error!"DBR);
 206   2                      break;
 207   2      
 208   2              case EVENT_NEVER:
 209   2                      if(event_value);
 210   2                      isp_found();
 211   2                      str_cmp(&event_id, &event_id);
 212   2                      led_blink(0);
 213   2                      break;
 214   2          }
 215   1      }
 216          
 217          
 218          
 219          //-------------------------------------//
 220          //            Startup task             //
 221          //-------------------------------------//
 222          void main()
 223          {
 224   1          isp_security_loop();                               // ISP mode recovery delay
 225   1      
 226   1          target_init();
 227   1      
 228   1          timers_init();
 229   1          led_init();
 230   1          uart_init(18432000, 6, 19200);                     // init HW232 komunikace
 231   1          event_init();
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 5   

 232   1          event_send(EVENT_STARTUP, 0);
 233   1          stdout_init(uart_putchar);
 234   1          tsense_init();
 235   1      
 236   1          printf("Thermostat %s.%s, current MCU: %s, date: %s"BR"type ? for help"DBR, VERSION, BUILD, target_mcu
             -_str[TARGET_MCU], __DATE__);
 237   1          
 238   1          cmd_init(CMD_SESSION_ID_TERMINAL, &CMD_TAB_TERMINAL, sizeof(CMD_TAB_TERMINAL), &main_terminal_parbuf, 
             -sizeof(main_terminal_parbuf));
 239   1      
 240   1          if(~cmd_validate_test(CMD_SESSION_ID_TERMINAL))       // validace tabulky prikazu
 241   1              printf("CMD TABLE ERROR!\r\n");
 242   1      
 243   1          main_measure_loop = 0;
 244   1      
 245   1          while(1)
 246   1          {
 247   2              isp_security_check();
 248   2      
 249   2              if(uart_ribuf)                                    // zpracovani prichoziho znaku po HWCOM
 250   2              {
 251   3                  putchar(uart_rbyte);
 252   3                  main_uart_command(cmd_detect(CMD_SESSION_ID_TERMINAL, uart_rbyte));
 253   3              }
 254   2      
 255   2              if(event_ready)                                   // zpracovani udalosti
 256   2                  main_event_proc(event_id, event_value);
 257   2      
 258   2              if(event_overflow)
 259   2              {
 260   3                  event_overflow = 0;
 261   3                  printf("EVENT OVERFLOW!\r\n");
 262   3              }
 263   2      
 264   2              if(main_measure_request)
 265   2              {
 266   3                  if(!TIMER_MEASURE)
 267   3                  {
 268   4                      tsense_add_task(0, EVENT_TSENSE_FINISH);
 269   4      
 270   4                      TIMER_MEASURE = TIME_500MS;//cmd_getparnum(CMD_SESSION_ID_TERMINAL, 0, 4);
 271   4                      main_measure_request = 0;
 272   4                  }
 273   3              }
 274   2      
 275   2              event_proc();
 276   2              uart_proc();
 277   2              led_proc();
 278   2              tsense_proc();
 279   2          }
 280   1      }
 281          
 282          
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _main_uart_command (BEGIN)
                                           ; SOURCE LINE # 61
;---- Variable 'command_id' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 66
0000 EF                MOV     A,R7
0001 14                DEC     A
0002 B40800            CJNE    A,#08H,?C0054
0005         ?C0054:
0005 4003              JC      $ + 5H
0007 020000      R     LJMP    ?C0021
000A 900000      R     MOV     DPTR,#?C0055
000D 75F003            MOV     B,#03H
0010 A4                MUL     AB
0011 C583              XCH     A,DPH
0013 25F0              ADD     A,B
0015 C583              XCH     A,DPH
0017 73                JMP     @A+DPTR
0018         ?C0055:
0018 020000      R     LJMP    ?C0003
001B 020000      R     LJMP    ?C0004
001E 020000      R     LJMP    ?C0002
0021 020000      R     LJMP    ?C0005
0024 020000      R     LJMP    ?C0009
0027 020000      R     LJMP    ?C0013
002A 020000      R     LJMP    ?C0021
002D 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
0030         ?C0002:
                                           ; SOURCE LINE # 69
0030 E4                CLR     A
0031 FF                MOV     R7,A
0032 020000      E     LJMP    _cmd_command_list
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 72
0035         ?C0003:
                                           ; SOURCE LINE # 73
0035 7BFF              MOV     R3,#0FFH
0037 7A00        R     MOV     R2,#HIGH ?SC_0
0039 7900        R     MOV     R1,#LOW ?SC_0
003B 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 74
003E 120000      E     LCALL   isp_recovery
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
0041 800C              SJMP    ?C0056
                                           ; SOURCE LINE # 78
0043         ?C0004:
                                           ; SOURCE LINE # 79
0043 7BFF              MOV     R3,#0FFH
0045 7A00        R     MOV     R2,#HIGH ?SC_30
0047 7900        R     MOV     R1,#LOW ?SC_30
0049 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 80
004C 120000      E     LCALL   isp_call_bootloader
                                           ; SOURCE LINE # 81
004F         ?C0056:
004F 7BFF              MOV     R3,#0FFH
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 7   

0051 7A00        R     MOV     R2,#HIGH ?SC_23
0053 7900        R     MOV     R1,#LOW ?SC_23
                                           ; SOURCE LINE # 82
0055 020000      R     LJMP    ?C0061
                                           ; SOURCE LINE # 84
0058         ?C0005:
                                           ; SOURCE LINE # 87
0058 E4                CLR     A
0059 FF                MOV     R7,A
005A 120000      E     LCALL   _cmd_par_count
005D EF                MOV     A,R7
005E 605A              JZ      ?C0006
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
0060 E4                CLR     A
0061 FF                MOV     R7,A
0062 120000      E     LCALL   _cmd_par_count
0065 D3                SETB    C
0066 EF                MOV     A,R7
0067 6480              XRL     A,#080H
0069 9481              SUBB    A,#081H
006B 401E              JC      ?C0007
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
006D 7B01              MOV     R3,#01H
006F E4                CLR     A
0070 FD                MOV     R5,A
0071 FF                MOV     R7,A
0072 120000      E     LCALL   _cmd_getparnum
0075 8F00        R     MOV     pin_id,R7
                                           ; SOURCE LINE # 92
0077 7B01              MOV     R3,#01H
0079 7D01              MOV     R5,#01H
007B E4                CLR     A
007C FF                MOV     R7,A
007D 120000      E     LCALL   _cmd_getparnum
0080 8F00        R     MOV     pin_state,R7
                                           ; SOURCE LINE # 94
0082 AB00        R     MOV     R3,pin_state
0084 AD00        R     MOV     R5,pin_id
0086 E4                CLR     A
0087 FF                MOV     R7,A
0088 120000      E     LCALL   _pin_change
                                           ; SOURCE LINE # 95
008B         ?C0007:
                                           ; SOURCE LINE # 97
008B 7B01              MOV     R3,#01H
008D E4                CLR     A
008E FD                MOV     R5,A
008F FF                MOV     R7,A
0090 120000      E     LCALL   _cmd_getparnum
0093 C007              PUSH    AR7
0095 C006              PUSH    AR6
0097 7B01              MOV     R3,#01H
0099 E4                CLR     A
009A FD                MOV     R5,A
009B FF                MOV     R7,A
009C 120000      E     LCALL   _cmd_getparnum
009F AD07              MOV     R5,AR7
00A1 E4                CLR     A
00A2 FF                MOV     R7,A
00A3 120000      E     LCALL   _pin_get_state
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 8   

00A6 E4                CLR     A
00A7 33                RLC     A
00A8 750000      E     MOV     ?_printf?BYTE+05H,#00H
00AB F500        E     MOV     ?_printf?BYTE+06H,A
00AD D000        E     POP     ?_printf?BYTE+03H
00AF D000        E     POP     ?_printf?BYTE+04H
00B1 7BFF              MOV     R3,#0FFH
00B3 7A00        R     MOV     R2,#HIGH ?SC_44
00B5 7900        R     MOV     R1,#LOW ?SC_44
00B7         ?C0057:
                                           ; SOURCE LINE # 98
00B7 020000      R     LJMP    ?C0061
00BA         ?C0006:
                                           ; SOURCE LINE # 100
00BA 7BFF              MOV     R3,#0FFH
00BC 7A00        R     MOV     R2,#HIGH ?SC_59
00BE 7900        R     MOV     R1,#LOW ?SC_59
00C0 AF80              MOV     R7,P0
00C2 750000      E     MOV     ?_printf?BYTE+03H,#00H
00C5 8F00        E     MOV     ?_printf?BYTE+04H,R7
00C7         ?C0058:
                                           ; SOURCE LINE # 102
00C7 020000      R     LJMP    ?C0061
                                           ; SOURCE LINE # 104
00CA         ?C0009:
                                           ; SOURCE LINE # 106
00CA E4                CLR     A
00CB FF                MOV     R7,A
00CC 120000      E     LCALL   _cmd_par_count
00CF EF                MOV     A,R7
00D0 6059              JZ      ?C0010
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
00D2 E4                CLR     A
00D3 FF                MOV     R7,A
00D4 120000      E     LCALL   _cmd_par_count
00D7 D3                SETB    C
00D8 EF                MOV     A,R7
00D9 6480              XRL     A,#080H
00DB 9481              SUBB    A,#081H
00DD 401E              JC      ?C0011
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
00DF 7B01              MOV     R3,#01H
00E1 E4                CLR     A
00E2 FD                MOV     R5,A
00E3 FF                MOV     R7,A
00E4 120000      E     LCALL   _cmd_getparnum
00E7 8F00        R     MOV     pin_id,R7
                                           ; SOURCE LINE # 111
00E9 7B01              MOV     R3,#01H
00EB 7D01              MOV     R5,#01H
00ED E4                CLR     A
00EE FF                MOV     R7,A
00EF 120000      E     LCALL   _cmd_getparnum
00F2 8F00        R     MOV     pin_state,R7
                                           ; SOURCE LINE # 113
00F4 AB00        R     MOV     R3,pin_state
00F6 AD00        R     MOV     R5,pin_id
00F8 7F01              MOV     R7,#01H
00FA 120000      E     LCALL   _pin_change
                                           ; SOURCE LINE # 114
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 9   

00FD         ?C0011:
                                           ; SOURCE LINE # 116
00FD 7B01              MOV     R3,#01H
00FF E4                CLR     A
0100 FD                MOV     R5,A
0101 FF                MOV     R7,A
0102 120000      E     LCALL   _cmd_getparnum
0105 C007              PUSH    AR7
0107 C006              PUSH    AR6
0109 7B01              MOV     R3,#01H
010B E4                CLR     A
010C FD                MOV     R5,A
010D FF                MOV     R7,A
010E 120000      E     LCALL   _cmd_getparnum
0111 AD07              MOV     R5,AR7
0113 7F01              MOV     R7,#01H
0115 120000      E     LCALL   _pin_get_state
0118 E4                CLR     A
0119 33                RLC     A
011A 750000      E     MOV     ?_printf?BYTE+05H,#00H
011D F500        E     MOV     ?_printf?BYTE+06H,A
011F D000        E     POP     ?_printf?BYTE+03H
0121 D000        E     POP     ?_printf?BYTE+04H
0123 7BFF              MOV     R3,#0FFH
0125 7A00        R     MOV     R2,#HIGH ?SC_69
0127 7900        R     MOV     R1,#LOW ?SC_69
0129         ?C0059:
                                           ; SOURCE LINE # 117
0129 8024              SJMP    ?C0061
012B         ?C0010:
                                           ; SOURCE LINE # 119
012B 7BFF              MOV     R3,#0FFH
012D 7A00        R     MOV     R2,#HIGH ?SC_84
012F 7900        R     MOV     R1,#LOW ?SC_84
0131 AF90              MOV     R7,P1
0133 750000      E     MOV     ?_printf?BYTE+03H,#00H
0136 8F00        E     MOV     ?_printf?BYTE+04H,R7
0138         ?C0060:
                                           ; SOURCE LINE # 122
0138 8015              SJMP    ?C0061
                                           ; SOURCE LINE # 124
013A         ?C0013:
                                           ; SOURCE LINE # 125
013A 7BFF              MOV     R3,#0FFH
013C 7A00        R     MOV     R2,#HIGH ?SC_94
013E 7900        R     MOV     R1,#LOW ?SC_94
0140 120000      E     LCALL   _printf
0143         ?C0014:
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
0143 120000      E     LCALL   uart_proc
                                           ; SOURCE LINE # 130
0146 3000FA            JNB     uart_ribuf,?C0014
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0149         ?C0015:
                                           ; SOURCE LINE # 133
0149 7BFF              MOV     R3,#0FFH
014B 7A00        R     MOV     R2,#HIGH ?SC_149
014D 7900        R     MOV     R1,#LOW ?SC_149
014F         ?C0061:
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 10  

014F 020000      E     LJMP    _printf
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 136
0152         ?C0017:
                                           ; SOURCE LINE # 137
0152 B200        R     CPL     main_measure_loop
                                           ; SOURCE LINE # 138
0154 7BFF              MOV     R3,#0FFH
0156 300006            JNB     main_measure_loop,?C0018
0159 7A00        R     MOV     R2,#HIGH ?SC_188
015B 7900        R     MOV     R1,#LOW ?SC_188
015D 8004              SJMP    ?C0019
015F         ?C0018:
015F 7A00        R     MOV     R2,#HIGH ?SC_196
0161 7900        R     MOV     R1,#LOW ?SC_196
0163         ?C0019:
0163 8B00        E     MOV     ?_printf?BYTE+03H,R3
0165 8A00        E     MOV     ?_printf?BYTE+04H,R2
0167 8900        E     MOV     ?_printf?BYTE+05H,R1
0169 7BFF              MOV     R3,#0FFH
016B 7A00        R     MOV     R2,#HIGH ?SC_160
016D 7900        R     MOV     R1,#LOW ?SC_160
016F 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 140
0172 300007            JNB     main_measure_loop,?C0021
                                           ; SOURCE LINE # 141
0175 7D06              MOV     R5,#06H
0177 E4                CLR     A
0178 FF                MOV     R7,A
0179 120000      E     LCALL   _tsense_add_task
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
017C         ?C0021:
017C 22                RET     
             ; FUNCTION _main_uart_command (END)

             ; FUNCTION _main_event_proc (BEGIN)
                                           ; SOURCE LINE # 150
0000 8F00        R     MOV     event_id,R7
0002 8C00        R     MOV     event_value,R4
0004 8D00        R     MOV     event_value+01H,R5
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 156
0006 E500        R     MOV     A,event_id
0008 24F9              ADD     A,#0F9H
000A 7003              JNZ     $ + 5H
000C 020000      R     LJMP    ?C0041
000F 14                DEC     A
0010 7003              JNZ     $ + 5H
0012 020000      R     LJMP    ?C0042
0015 2402              ADD     A,#02H
0017 6003              JZ      $ + 5H
0019 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 161
001C         ?C0024:
                                           ; SOURCE LINE # 162
001C 7BFF              MOV     R3,#0FFH
001E 7A00        R     MOV     R2,#HIGH ?SC_204
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 11  

0020 7900        R     MOV     R1,#LOW ?SC_204
0022 750000      E     MOV     ?_printf?BYTE+03H,#00H
0025 850000      E     MOV     ?_printf?BYTE+04H,tsense_interrupt_counter
0028 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 163
002B 7BFF              MOV     R3,#0FFH
002D 7A00        R     MOV     R2,#HIGH ?SC_219
002F 7900        R     MOV     R1,#LOW ?SC_219
0031 850000      E     MOV     ?_printf?BYTE+03H,tsense_timer_value_H
0034 850000      E     MOV     ?_printf?BYTE+04H,tsense_timer_value_H+01H
0037 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 164
003A 7BFF              MOV     R3,#0FFH
003C 7A00        R     MOV     R2,#HIGH ?SC_228
003E 7900        R     MOV     R1,#LOW ?SC_228
0040 850000      E     MOV     ?_printf?BYTE+03H,tsense_timer_value_L
0043 850000      E     MOV     ?_printf?BYTE+04H,tsense_timer_value_L+01H
0046 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 165
0049 7BFF              MOV     R3,#0FFH
004B 7A00        R     MOV     R2,#HIGH ?SC_237
004D 7900        R     MOV     R1,#LOW ?SC_237
004F 850000      E     MOV     ?_printf?BYTE+06H,tsense_temperature+03H
0052 850000      E     MOV     ?_printf?BYTE+05H,tsense_temperature+02H
0055 850000      E     MOV     ?_printf?BYTE+04H,tsense_temperature+01H
0058 850000      E     MOV     ?_printf?BYTE+03H,tsense_temperature
005B 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 168
005E 7BFF              MOV     R3,#0FFH
0060 7A00        R     MOV     R2,#HIGH ?SC_248
0062 7900        R     MOV     R1,#LOW ?SC_248
0064 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 169
0067 7BFF              MOV     R3,#0FFH
0069 7A00        R     MOV     R2,#HIGH ?SC_292
006B 7900        R     MOV     R1,#LOW ?SC_292
006D 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 170
0070 750002      R     MOV     i,#02H
0073         ?C0025:
                                           ; SOURCE LINE # 171
0073 7BFF              MOV     R3,#0FFH
0075 7A00        R     MOV     R2,#HIGH ?SC_317
0077 7900        R     MOV     R1,#LOW ?SC_317
0079 E500        R     MOV     A,i
007B 25E0              ADD     A,ACC
007D 2400        E     ADD     A,#LOW tsense_timer_H_value_min
007F F8                MOV     R0,A
0080 E6                MOV     A,@R0
0081 F500        E     MOV     ?_printf?BYTE+03H,A
0083 08                INC     R0
0084 E6                MOV     A,@R0
0085 F500        E     MOV     ?_printf?BYTE+04H,A
0087 120000      E     LCALL   _printf
008A D500E6            DJNZ    i,?C0025
008D         ?C0026:
                                           ; SOURCE LINE # 173
008D 7BFF              MOV     R3,#0FFH
008F 7A00        R     MOV     R2,#HIGH ?SC_322
0091 7900        R     MOV     R1,#LOW ?SC_322
0093 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 174
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 12  

0096 750002      R     MOV     i,#02H
0099         ?C0028:
                                           ; SOURCE LINE # 175
0099 7BFF              MOV     R3,#0FFH
009B 7A00        R     MOV     R2,#HIGH ?SC_317
009D 7900        R     MOV     R1,#LOW ?SC_317
009F E500        R     MOV     A,i
00A1 25E0              ADD     A,ACC
00A3 2400        E     ADD     A,#LOW tsense_timer_H_value_max
00A5 F8                MOV     R0,A
00A6 E6                MOV     A,@R0
00A7 F500        E     MOV     ?_printf?BYTE+03H,A
00A9 08                INC     R0
00AA E6                MOV     A,@R0
00AB F500        E     MOV     ?_printf?BYTE+04H,A
00AD 120000      E     LCALL   _printf
00B0 D500E6            DJNZ    i,?C0028
00B3         ?C0029:
                                           ; SOURCE LINE # 177
00B3 7BFF              MOV     R3,#0FFH
00B5 7A00        R     MOV     R2,#HIGH ?SC_347
00B7 7900        R     MOV     R1,#LOW ?SC_347
00B9 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 178
00BC 750002      R     MOV     i,#02H
00BF         ?C0031:
                                           ; SOURCE LINE # 179
00BF 7BFF              MOV     R3,#0FFH
00C1 7A00        R     MOV     R2,#HIGH ?SC_317
00C3 7900        R     MOV     R1,#LOW ?SC_317
00C5 E500        R     MOV     A,i
00C7 25E0              ADD     A,ACC
00C9 2400        E     ADD     A,#LOW tsense_timer_L_value_min
00CB F8                MOV     R0,A
00CC E6                MOV     A,@R0
00CD F500        E     MOV     ?_printf?BYTE+03H,A
00CF 08                INC     R0
00D0 E6                MOV     A,@R0
00D1 F500        E     MOV     ?_printf?BYTE+04H,A
00D3 120000      E     LCALL   _printf
00D6 D500E6            DJNZ    i,?C0031
00D9         ?C0032:
                                           ; SOURCE LINE # 181
00D9 7BFF              MOV     R3,#0FFH
00DB 7A00        R     MOV     R2,#HIGH ?SC_372
00DD 7900        R     MOV     R1,#LOW ?SC_372
00DF 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 182
00E2 750002      R     MOV     i,#02H
00E5         ?C0034:
                                           ; SOURCE LINE # 183
00E5 7BFF              MOV     R3,#0FFH
00E7 7A00        R     MOV     R2,#HIGH ?SC_317
00E9 7900        R     MOV     R1,#LOW ?SC_317
00EB E500        R     MOV     A,i
00ED 25E0              ADD     A,ACC
00EF 2400        E     ADD     A,#LOW tsense_timer_L_value_max
00F1 F8                MOV     R0,A
00F2 E6                MOV     A,@R0
00F3 F500        E     MOV     ?_printf?BYTE+03H,A
00F5 08                INC     R0
00F6 E6                MOV     A,@R0
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 13  

00F7 F500        E     MOV     ?_printf?BYTE+04H,A
00F9 120000      E     LCALL   _printf
00FC D500E6            DJNZ    i,?C0034
00FF         ?C0035:
                                           ; SOURCE LINE # 188
00FF 7BFF              MOV     R3,#0FFH
0101 7A00        R     MOV     R2,#HIGH ?SC_397
0103 7900        R     MOV     R1,#LOW ?SC_397
0105 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 189
0108 E4                CLR     A
0109 F500        R     MOV     i,A
010B         ?C0037:
010B E500        R     MOV     A,i
010D C3                CLR     C
010E 9500        E     SUBB    A,tsense_timer_H_array_ix
0110 5029              JNC     ?C0038
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0112 7BFF              MOV     R3,#0FFH
0114 7A00        R     MOV     R2,#HIGH ?SC_439
0116 7900        R     MOV     R1,#LOW ?SC_439
0118 E500        R     MOV     A,i
011A 25E0              ADD     A,ACC
011C 2400        E     ADD     A,#LOW tsense_timer_H_array
011E F8                MOV     R0,A
011F E6                MOV     A,@R0
0120 F500        E     MOV     ?_printf?BYTE+03H,A
0122 08                INC     R0
0123 E6                MOV     A,@R0
0124 F500        E     MOV     ?_printf?BYTE+04H,A
0126 E500        R     MOV     A,i
0128 25E0              ADD     A,ACC
012A 2400        E     ADD     A,#LOW tsense_timer_L_array
012C F8                MOV     R0,A
012D E6                MOV     A,@R0
012E F500        E     MOV     ?_printf?BYTE+05H,A
0130 08                INC     R0
0131 E6                MOV     A,@R0
0132 F500        E     MOV     ?_printf?BYTE+06H,A
0134 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 192
0137 0500        R     INC     i
0139 80D0              SJMP    ?C0037
013B         ?C0038:
                                           ; SOURCE LINE # 195
013B 30002A            JNB     main_measure_loop,?C0044
                                           ; SOURCE LINE # 196
013E D200        R     SETB    main_measure_request
                                           ; SOURCE LINE # 200
0140 22                RET     
                                           ; SOURCE LINE # 202
0141         ?C0041:
                                           ; SOURCE LINE # 203
0141 C200        R     CLR     main_measure_loop
                                           ; SOURCE LINE # 204
0143 C200        R     CLR     main_measure_request
                                           ; SOURCE LINE # 205
0145 7BFF              MOV     R3,#0FFH
0147 7A00        R     MOV     R2,#HIGH ?SC_448
0149 7900        R     MOV     R1,#LOW ?SC_448
014B 020000      E     LJMP    _printf
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 14  

                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 208
014E         ?C0042:
                                           ; SOURCE LINE # 209
014E         ?C0043:
                                           ; SOURCE LINE # 210
014E 120000      E     LCALL   isp_found
                                           ; SOURCE LINE # 211
0151 750000      E     MOV     ?_str_cmp?BYTE+03H,#00H
0154 750000      R     MOV     ?_str_cmp?BYTE+04H,#HIGH event_id
0157 750000      R     MOV     ?_str_cmp?BYTE+05H,#LOW event_id
015A 7B00              MOV     R3,#00H
015C 7A00        R     MOV     R2,#HIGH event_id
015E 7900        R     MOV     R1,#LOW event_id
0160 120000      E     LCALL   _str_cmp
                                           ; SOURCE LINE # 212
0163 E4                CLR     A
0164 FF                MOV     R7,A
0165 120000      E     LCALL   _led_blink
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0168         ?C0044:
0168 22                RET     
             ; FUNCTION _main_event_proc (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0000 120000      E     LCALL   isp_security_loop
                                           ; SOURCE LINE # 226
0003 120000      E     LCALL   target_init
                                           ; SOURCE LINE # 228
0006 120000      E     LCALL   timers_init
                                           ; SOURCE LINE # 229
0009 120000      E     LCALL   led_init
                                           ; SOURCE LINE # 230
000C 750006      E     MOV     ?_uart_init?BYTE+04H,#06H
000F E4                CLR     A
0010 F500        E     MOV     ?_uart_init?BYTE+08H,A
0012 75004B      E     MOV     ?_uart_init?BYTE+07H,#04BH
0015 F500        E     MOV     ?_uart_init?BYTE+06H,A
0017 F500        E     MOV     ?_uart_init?BYTE+05H,A
0019 FF                MOV     R7,A
001A 7E40              MOV     R6,#040H
001C 7D19              MOV     R5,#019H
001E 7C01              MOV     R4,#01H
0020 120000      E     LCALL   _uart_init
                                           ; SOURCE LINE # 231
0023 120000      E     LCALL   event_init
                                           ; SOURCE LINE # 232
0026 E4                CLR     A
0027 FD                MOV     R5,A
0028 FC                MOV     R4,A
0029 7F01              MOV     R7,#01H
002B 120000      E     LCALL   _event_send
                                           ; SOURCE LINE # 233
002E 7BFF              MOV     R3,#0FFH
0030 7A00        E     MOV     R2,#HIGH _uart_putchar
0032 7900        E     MOV     R1,#LOW _uart_putchar
0034 120000      E     LCALL   _stdout_init
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 15  

                                           ; SOURCE LINE # 234
0037 120000      E     LCALL   tsense_init
                                           ; SOURCE LINE # 236
003A 7500FF      E     MOV     ?_printf?BYTE+03H,#0FFH
003D 750000      R     MOV     ?_printf?BYTE+04H,#HIGH ?SC_544
0040 750000      R     MOV     ?_printf?BYTE+05H,#LOW ?SC_544
0043 7500FF      E     MOV     ?_printf?BYTE+06H,#0FFH
0046 750000      R     MOV     ?_printf?BYTE+07H,#HIGH ?SC_550
0049 750000      R     MOV     ?_printf?BYTE+08H,#LOW ?SC_550
004C 7500FF      E     MOV     ?_printf?BYTE+09H,#0FFH
004F 850000      E     MOV     ?_printf?BYTE+0AH,target_mcu_str+04H
0052 850000      E     MOV     ?_printf?BYTE+0BH,target_mcu_str+05H
0055 7500FF      E     MOV     ?_printf?BYTE+0CH,#0FFH
0058 750000      R     MOV     ?_printf?BYTE+0DH,#HIGH ?SC_557
005B 750000      R     MOV     ?_printf?BYTE+0EH,#LOW ?SC_557
005E 7BFF              MOV     R3,#0FFH
0060 7A00        R     MOV     R2,#HIGH ?SC_480
0062 7900        R     MOV     R1,#LOW ?SC_480
0064 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 238
0067 750000      E     MOV     ?_cmd_init?BYTE+04H,#00H
006A 75004A      E     MOV     ?_cmd_init?BYTE+05H,#04AH
006D 750001      E     MOV     ?_cmd_init?BYTE+06H,#01H
0070 750000      R     MOV     ?_cmd_init?BYTE+07H,#HIGH main_terminal_parbuf
0073 750000      R     MOV     ?_cmd_init?BYTE+08H,#LOW main_terminal_parbuf
0076 750014      E     MOV     ?_cmd_init?BYTE+09H,#014H
0079 7BFF              MOV     R3,#0FFH
007B 7A00        R     MOV     R2,#HIGH CMD_TAB_TERMINAL
007D 7900        R     MOV     R1,#LOW CMD_TAB_TERMINAL
007F E4                CLR     A
0080 FF                MOV     R7,A
0081 120000      E     LCALL   _cmd_init
                                           ; SOURCE LINE # 240
0084 E4                CLR     A
0085 FF                MOV     R7,A
0086 120000      E     LCALL   _cmd_validate_test
0089 B3                CPL     C
008A 5009              JNC     ?C0045
                                           ; SOURCE LINE # 241
008C 7BFF              MOV     R3,#0FFH
008E 7A00        R     MOV     R2,#HIGH ?SC_569
0090 7900        R     MOV     R1,#LOW ?SC_569
0092 120000      E     LCALL   _printf
0095         ?C0045:
                                           ; SOURCE LINE # 243
0095 C200        R     CLR     main_measure_loop
0097         ?C0046:
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
0097 120000      E     LCALL   isp_security_check
                                           ; SOURCE LINE # 249
009A 300013            JNB     uart_ribuf,?C0048
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
009D 7800        E     MOV     R0,#LOW uart_rbyte
009F E6                MOV     A,@R0
00A0 FF                MOV     R7,A
00A1 120000      E     LCALL   _putchar
                                           ; SOURCE LINE # 252
00A4 7800        E     MOV     R0,#LOW uart_rbyte
00A6 E6                MOV     A,@R0
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 16  

00A7 FD                MOV     R5,A
00A8 E4                CLR     A
00A9 FF                MOV     R7,A
00AA 120000      E     LCALL   _cmd_detect
00AD 120000      R     LCALL   _main_uart_command
                                           ; SOURCE LINE # 253
00B0         ?C0048:
                                           ; SOURCE LINE # 255
00B0 30000D            JNB     event_ready,?C0049
                                           ; SOURCE LINE # 256
00B3 7800        E     MOV     R0,#LOW event_id
00B5 E6                MOV     A,@R0
00B6 FF                MOV     R7,A
00B7 7800        E     MOV     R0,#LOW event_value
00B9 E6                MOV     A,@R0
00BA FD                MOV     R5,A
00BB 7C00              MOV     R4,#00H
00BD 120000      R     LCALL   _main_event_proc
00C0         ?C0049:
                                           ; SOURCE LINE # 258
00C0 30000B            JNB     event_overflow,?C0050
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
00C3 C200        E     CLR     event_overflow
                                           ; SOURCE LINE # 261
00C5 7BFF              MOV     R3,#0FFH
00C7 7A00        R     MOV     R2,#HIGH ?SC_588
00C9 7900        R     MOV     R1,#LOW ?SC_588
00CB 120000      E     LCALL   _printf
                                           ; SOURCE LINE # 262
00CE         ?C0050:
                                           ; SOURCE LINE # 264
00CE 300014            JNB     main_measure_request,?C0051
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
00D1 E500        E     MOV     A,timers+07H
00D3 4500        E     ORL     A,timers+06H
00D5 700E              JNZ     ?C0051
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
00D7 7D06              MOV     R5,#06H
00D9 FF                MOV     R7,A
00DA 120000      E     LCALL   _tsense_add_task
                                           ; SOURCE LINE # 270
00DD 750000      E     MOV     timers+06H,#00H
00E0 750032      E     MOV     timers+07H,#032H
                                           ; SOURCE LINE # 271
00E3 C200        R     CLR     main_measure_request
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
00E5         ?C0051:
                                           ; SOURCE LINE # 275
00E5 120000      E     LCALL   event_proc
                                           ; SOURCE LINE # 276
00E8 120000      E     LCALL   uart_proc
                                           ; SOURCE LINE # 277
00EB 120000      E     LCALL   led_proc
                                           ; SOURCE LINE # 278
00EE 120000      E     LCALL   tsense_proc
                                           ; SOURCE LINE # 279
00F1 80A4              SJMP    ?C0046
             ; FUNCTION main (END)
C51 COMPILER V8.05a   MAIN                                                                 04/16/2009 20:53:43 PAGE 17  




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    985    ----
   CONSTANT SIZE    =    680    ----
   XDATA SIZE       =     20    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
